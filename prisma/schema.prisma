generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @unique @default(autoincrement())
  email     String   @unique
  password  String
  role      String?  @default("student")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  username  String
  student   Student?
}

model Student {
  id               Int           @id @unique @default(autoincrement())
  nim              Int           @unique
  pob              String?
  dob              DateTime?     @db.Date
  address          String?       @db.Text
  gender           String?
  gpa              Float?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  evaluationStatus String?       @default("not_sent")
  evaluationPoint  Float?        @default(0)
  fatherIncome     Int?
  fatherJob        String?
  fatherName       String?
  firstName        String
  lastName         String
  motherIncome     Int?
  motherJob        String?
  motherName       String?
  userId           Int           @unique
  achievements     Achievement[]
  grades           Grade[]
  evaluations      Evaluation[]
  user             User          @relation(fields: [userId], references: [id])
}

model Grade {
  id            Int      @id @unique @default(autoincrement())
  semester      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  cumulativeGpa Float
  studentId     Int
  student       Student  @relation(fields: [studentId], references: [id])

  @@index([studentId], map: "Grade_studentId_fkey")
}

model Achievement {
  id            Int      @id @unique @default(autoincrement())
  achievement   String
  description   String?  @db.Text
  year          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  studentId     Int
  student     Student  @relation(fields: [studentId], references: [id])

  @@index([studentId], map: "Achievement_studentId_fkey")
}

model Criteria {
  id              Int     @id @unique @default(autoincrement())
  name            String  @unique
  weightValue     Int
  maxValue        Float
  evaluation      Evaluation[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

model Evaluation {
  id                  Int       @id @unique @default(autoincrement())
  studentId           Int
  student             Student   @relation(fields: [studentId], references: [id])
  criteriaId          Int
  criteria            Criteria  @relation(fields: [criteriaId], references: [id])
  criteriaName        String
  criteriaMaxValue    Float
  criteriaWeightValue Int
  weightValue         Float?
  value               Float?
  criteriaResult      Float?
  result              Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
} 